{"version":3,"sources":["cat.jpg","menu.js","home.js","about.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Menu","react_default","a","createElement","className","react_router_dom","to","Home","menu","href","style","width","height","src","cat","alt","React","Component","About","Boolean","window","location","hostname","match","routing","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uMCqBzBC,MAjBf,WACI,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,eAAvB,SAGJH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,SAASF,UAAU,eAA5B,8BCSDG,mLAfP,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,gGACuDF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,kCAAR,cACvDR,EAAAC,EAAAC,cAAA,qFACAF,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACC,MAAU,QAASC,OAAS,QAASC,IAAKC,IAAKC,IAAI,kFAVjEC,IAAMC,WCeVC,mLAXP,OACIjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,kBANIa,IAAMC,WCKNE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECVAC,EACFvB,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjCN,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWV,MAK5CW,IAASC,OAAON,EAASO,SAASC,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d6608db5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.d06ff109.jpg\";","import React from 'react';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport './scss/global.scss';\n\nfunction Menu() {\n    return (\n        <header className=\"App-header\">\n            <ul className=\"header-list\">\n                <li className='header-list-item'>\n                    <Link to='/' className=\"header-link\">\n                    Home</Link>\n                </li>\n                <li className=\"header-list-item\">\n                <Link to='/about' className=\"header-link\">\n                    About</Link>\n                </li>\n            </ul>\n        </header>\n    );\n}\n\nexport default Menu;","import React from 'react';\nimport Menu from './menu';\nimport './scss/global.scss';\nimport cat from './cat.jpg';\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div className=\"Home\">\n                <Menu></Menu>\n                <div className=\"Home-body\">\n                    <h1>Welcome!</h1>\n                    <p>This site is a work in progress. \n                        If you would like to be in contact with me, please <a href=\"mailto: kodonnell327@gmail.com\">email me!</a></p>\n                    <p>Here is a picture of my cat while I work on the website in my free time.</p>\n                    <img style={{'width' : '400px', 'height':'auto'}} src={cat} alt=\"Sydney, my cat, bothering my boyfriend while he does music homework.\"></img>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Menu from './menu';\nimport './scss/global.scss';\n\n/**\n * Class for the about me page\n */\nclass About extends React.Component {\n    render() {\n        return (\n            <div>\n                <Menu></Menu>\n                <h1>About Me!</h1>\n                <p></p>\n            </div>\n            \n        );\n    }\n}\n\nexport default About;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/global.scss';\nimport Home from './home';\nimport About from './about';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\n\nconst routing = (\n    <Router>\n        <div>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n        </div>\n    </Router>\n);\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}